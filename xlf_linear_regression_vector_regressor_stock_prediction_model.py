# -*- coding: utf-8 -*-
"""XLF Linear Regression/Vector Regressor stock prediction model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1stiQkb_VKQY_ZctncBSILGhbgtyU21XU
"""

pip install quandl

from pandas_datareader import data as web
from datetime import datetime
stock = 'PSTH'
start_date = datetime(2020, 9, 10)
end_date = datetime(2021, 2, 21)
import quandl
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split

df = web.DataReader(stock, data_source='yahoo', start=start_date, end=end_date)
print(df.tail())

df = df[['Adj Close']]
print(df.head())

forecast_out = 23
df['Prediction'] = df[['Adj Close']].shift(-forecast_out)
print(df.tail())

X = np.array(df.drop(['Prediction'],1))
X = X[:-forecast_out]
print(X)

### Creater the dependent data set (y) #####
# Convert the data frame to a numpy array (All of the values including the NAN's)
y = np.array(df['Prediction'])
# Get all of the y Values except the last 'n' rows
y = y[:-forecast_out]
print(y)

# Split the data into 80% traning and 20% testing
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Create and train the Support Vector Machine (Regressor)
svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.1)
svr_rbf.fit(x_train, y_train)

# Testing Model: Score returns the coefficient of determination R^2 of the prediction.
# The best possible score is 1.0
svm_confidence = svr_rbf.score(x_test, y_test)
print("svm confidence: ", svm_confidence)

# Create and train the Linear Regression Model
lr = LinearRegression()
# Train the model
lr.fit(x_train, y_train)

# Testing Model: Score returns the coefficient of determination R^2 of the prediction.
# The best possible score is 1.0
lr_confidence = lr.score(x_test, y_test)
print("lr confidence: ", lr_confidence)

# Set x_forecast equal to the last 30 rows of the originals data set from Adj. Close column
x_forecast = np.array(df.drop(['Prediction'],1))[-forecast_out:]
print(x_forecast)

# Print linear regression model the predictions for the next 'n' days
lr_prediction = lr.predict(x_forecast)
print(lr_prediction)

# Print support vector regressor model the predictions for the next 'n' days
svm_prediction = svr_rbf.predict(x_forecast)
print(svm_prediction)